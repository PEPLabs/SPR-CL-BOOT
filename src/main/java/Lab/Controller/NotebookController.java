package Lab.Controller;

import Lab.Model.Entry;
import Lab.Service.NotebookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.websocket.server.PathParam;
import java.util.List;

/**
 * A @Controller is a specialized type of @Component, known as a Stereotype annotation. Stereotype annotations are
 * components that behave in a specific, stereotyped way - in this case, as a Controller written to service
 * HTTP requests. You can think of this as @Controller 'extending' @Component.
 *
 * The functionality of @Controller is provided by Spring MVC (model-view-controller), which is an important project
 * that allows for the development of web applications using Spring.
 *
 * There is no need to change anything in this class.
 */
@Controller
public class NotebookController {
    NotebookService notebookService;

    /**
     * Autowire in a NotebookService into this Constructor (Constructor injection)
     * @param notebookService NotebookService bean
     */
    @Autowired
    public NotebookController(NotebookService notebookService){
        this.notebookService = notebookService;
    }
    /**
     * This @RequestMapping annotation allows this method to handle HTTP requests on GET localhost:9000/entries for
     * retrieving a list of all notebook entries.
     * The @ResponseBody annotation causes this method to respond with a JSON representation of the returns List<Entry>
     * value.
     * @return a JSON response of all notebook entries
     */
    @RequestMapping(value = "entries", method = RequestMethod.GET)
    @ResponseBody
    public List<Entry> getAllNotebookEntries(){
        return notebookService.getEntries();
    }
    /**
     * This @RequestMapping annotation allows this method to handle HTTP requests on GET localhost:9000/entries/{id} for
     * retrieving a single notebook entry.
     * The @ResponseBody annotation causes this method to respond with a JSON representation of the returned Entry
     * value.
     * @return a JSON response of a single notebook entry
     */
    @RequestMapping(value = "entries/{id}",  method = RequestMethod.GET)
    @ResponseBody
    public Entry getNotebookEntriesById(@PathParam("id") int entryNumber){
        return notebookService.getEntriesById(entryNumber);
    }
    /**
     * This @RequestMapping annotation allows this method to handle HTTP requests on POST localhost:9000/entries,
     * which contains a request body with a valid JSON Entry representation, for adding a new notebook entry.
     * Here's an example Notebook Entry JSON for you to experiment with in Postman:
     *
     * {
     *     "text":"learned Spring today! feeling great."
     * }
     *
     * the time field will be generated by the Service class.
     * The @ResponseBody annotation causes this method to respond with a JSON representation of the returned Entry
     * value.
     * @return a JSON response of the added notebook entry
     */
    @RequestMapping(value = "entries", method = RequestMethod.POST)
    @ResponseBody
    public Entry postNotebookEntry(@RequestBody Entry entry){
        return notebookService.addEntry(entry);
    }

}